"""
Django settings for asic_project project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config, Csv
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# ====================================
# Django Core Settings (from .env)
# ====================================

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = config(
    'ALLOWED_HOSTS', 
    default='localhost,127.0.0.1', 
    cast=Csv()
)

# ====================================
# Application Definition
# ====================================

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'corsheaders',
]

LOCAL_APPS = [
    'apps.common',
    'apps.query_address',
    'apps.query_name_availability',
    'apps.get_nni',
    'apps.search_nni',
    'apps.bn_lodge_application',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

# ====================================
# Middleware Configuration
# ====================================

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Add CORS middleware first
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'asic_project.urls'

# ====================================
# Templates Configuration
# ====================================

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',  # Added debug context
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'asic_project.wsgi.application'

# ====================================
# Database Configuration
# ====================================

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# ====================================
# Password Validation
# ====================================

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# ====================================
# Internationalization
# ====================================

LANGUAGE_CODE = 'en-au'  # Australian English
TIME_ZONE = 'Australia/Melbourne'  # Australian timezone
USE_I18N = True
USE_TZ = True

# ====================================
# Static Files Configuration
# ====================================

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# ====================================
# Default Primary Key Field Type
# ====================================

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ====================================
# CORS Configuration (from .env)
# ====================================

CORS_ALLOWED_ORIGINS = config(
    'CORS_ALLOWED_ORIGINS',
    default='http://localhost:3000,http://127.0.0.1:3000',
    cast=Csv()
)

CORS_ALLOW_CREDENTIALS = True

# Allow CORS for all origins in development only
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True

# ====================================
# Django REST Framework Configuration
# ====================================

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': config('ASIC_API_RATE_LIMIT', default='100', cast=str) + '/hour',
    }
}

# ====================================
# ASIC API Configuration (from .env)
# ====================================

# ASIC Authentication
ASIC_CONFIG = {
    'USERNAME': config('ASIC_USERNAME'),
    'PASSWORD': config('ASIC_PASSWORD'),
    'SENDER_ID': config('ASIC_SENDER_ID'),
    'SENDER_TYPE': config('ASIC_SENDER_TYPE', default='REGA'),
    'AGENT_ID': config('ASIC_AGENT_ID', default='40540'),
    'USER_ID': config('ASIC_USER_ID', default='S00296'),
    'USER_PASSWORD': config('ASIC_USER_PASSWORD', default='S00296'),
}

# ABR Configuration
ABR_CONFIG = {
    'GUID': config('ABR_GUID'),
}

# ASIC WSDL Endpoints
ASIC_ENDPOINTS = {
    'QUERY_ADDRESS': config(
        'ASIC_QUERY_ADDRESS_WSDL',
        default='https://www.gateway.uat.asic.gov.au/gateway/ExternalQueryAddressPort?WSDL'
    ),
    'QUERY_NAME_AVAILABILITY': config(
        'ASIC_QUERY_NAME_AVAILABILITY_WSDL', 
        default='https://www.gateway.uat.asic.gov.au/gateway/ExternalQueryNameAvailabilityPortV2?WSDL'
    ),
    'GET_NNI': config(
        'ASIC_GET_NNI_WSDL',
        default='https://www.gateway.uat.asic.gov.au/gateway/ExternalGetNniNamePortV3?WSDL'
    ),
    'SEARCH_NNI': config(
        'ASIC_SEARCH_NNI_WSDL',
        default='https://www.gateway.uat.asic.gov.au/gateway/ExternalSearchNniNamePortV3?WSDL'
    ),
    'BN_LODGE': config(
        'ASIC_BN_LODGE_WSDL',
        default='https://www.gateway.uat.asic.gov.au/gateway/ExternalBz1Port?WSDL'
    ),
}

# API Rate Limiting
ASIC_API_RATE_LIMIT = config('ASIC_API_RATE_LIMIT', default=100, cast=int)

# ====================================
# Logging Configuration
# ====================================

LOG_LEVEL = config('LOG_LEVEL', default='INFO')

# Create logs directory if it doesn't exist
LOGS_DIR = BASE_DIR / 'logs'
os.makedirs(LOGS_DIR, exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose' if DEBUG else 'simple',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': LOGS_DIR / 'asic_api.log',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': LOG_LEVEL,
    },
    'loggers': {
        'asic_api': {
            'handlers': ['console', 'file'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
        'zeep': {
            'handlers': ['console'],
            'level': 'WARNING',  # Reduce zeep verbosity
            'propagate': False,
        },
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# ====================================
# Development Settings
# ====================================

if DEBUG:
    # Development-only settings
    INTERNAL_IPS = [
        "127.0.0.1",
        "localhost",
    ]
    
    # Add debug toolbar if installed
    try:
        import debug_toolbar
        INSTALLED_APPS += ['debug_toolbar']
        MIDDLEWARE.insert(1, 'debug_toolbar.middleware.DebugToolbarMiddleware')
    except ImportError:
        pass